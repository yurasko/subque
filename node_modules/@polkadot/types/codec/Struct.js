import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { assert, hexToU8a, isBoolean, isFunction, isHex, isObject, isU8a, isUndefined, objectProperties, stringCamelCase, stringify, u8aConcat, u8aToHex } from '@polkadot/util';
import { compareMap, decodeU8a, mapToTypeMap, typesToMap } from "./utils/index.js";

/** @internal */
function decodeStructFromObject(registry, Types, value, jsonMap) {
  let jsonObj;
  const inputKeys = Object.keys(Types);
  const typeofArray = Array.isArray(value);
  const typeofMap = value instanceof Map;
  assert(typeofArray || typeofMap || isObject(value), () => `Struct: Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object, map or array`);
  assert(!typeofArray || value.length === inputKeys.length, () => `Struct: Unable to map ${stringify(value)} array to object with known keys ${inputKeys.join(', ')}`);
  const raw = new Array(inputKeys.length);

  for (let i = 0; i < inputKeys.length; i++) {
    const key = inputKeys[i];
    const jsonKey = jsonMap.get(key) || key;
    const Type = Types[key];
    let assign;

    try {
      if (typeofArray) {
        assign = value[i];
      } else if (typeofMap) {
        assign = jsonKey && value.get(jsonKey);
      } else {
        assign = jsonKey && value[jsonKey];

        if (isUndefined(assign)) {
          if (isUndefined(jsonObj)) {
            const entries = Object.entries(value);
            jsonObj = {};

            for (let e = 0; e < entries.length; e++) {
              jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
            }
          }

          assign = jsonKey && jsonObj[jsonKey];
        }
      }

      raw[i] = [key, assign instanceof Type ? assign : new Type(registry, assign)];
    } catch (error) {
      let type = Type.name;

      try {
        type = new Type(registry).toRawType();
      } catch (error) {// ignore
      }

      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
    }
  }

  return raw;
}

function decodeZip(k, v) {
  return [k, v];
}
/**
 * Decode input to pass into constructor.
 *
 * @param Types - Types definition.
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`
 * are also keys in `Types`
 * - array with `[value1, value2]` assuming the array has the same length as
 * `Object.keys(Types)`
 * @param jsonMap
 * @internal
 */


function decodeStruct(registry, Types, value, jsonMap) {
  if (isU8a(value)) {
    return decodeU8a(registry, value, Types, decodeZip);
  } else if (value instanceof Struct) {
    return [value, 0];
  } else if (isHex(value)) {
    return decodeStruct(registry, Types, hexToU8a(value), jsonMap);
  } // We assume from here that value is a JS object (Array, Map, Object)


  return [decodeStructFromObject(registry, Types, value || {}, jsonMap), 0];
}
/**
 * @name Struct
 * @description
 * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
 * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
 * values in the constructor and it manages the decoding. It is important that the constructor
 * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
 * it needs to decoded in the specific defined order.
 * @noInheritDoc
 */


var _jsonMap = /*#__PURE__*/_classPrivateFieldLooseKey("jsonMap");

var _Types = /*#__PURE__*/_classPrivateFieldLooseKey("Types");

export class Struct extends Map {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  constructor(registry, Types, value, jsonMap = new Map()) {
    const [decoded, decodedLength] = decodeStruct(registry, mapToTypeMap(registry, Types), value, jsonMap);
    super(decoded);
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.initialU8aLength = void 0;
    Object.defineProperty(this, _jsonMap, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _Types, {
      writable: true,
      value: void 0
    });
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    _classPrivateFieldLooseBase(this, _jsonMap)[_jsonMap] = jsonMap;
    _classPrivateFieldLooseBase(this, _Types)[_Types] = mapToTypeMap(registry, Types);
  }

  static with(Types, jsonMap) {
    const keys = Object.keys(Types);
    return class extends Struct {
      constructor(registry, value) {
        super(registry, Types, value, jsonMap);
        objectProperties(this, keys, k => this.get(k));
      }

    };
  }
  /**
   * @description The available keys for this struct
   */


  get defKeys() {
    return Object.keys(_classPrivateFieldLooseBase(this, _Types)[_Types]);
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    for (const v of this.values()) {
      if (!v.isEmpty) {
        return false;
      }
    }

    return true;
  }
  /**
   * @description Returns the Type description of the structure
   */


  get Type() {
    const result = {};
    const defs = Object.entries(_classPrivateFieldLooseBase(this, _Types)[_Types]);

    for (let i = 0; i < defs.length; i++) {
      const [key, Type] = defs[i];
      result[key] = new Type(this.registry).toRawType();
    }

    return result;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (const v of this.values()) {
      total += v.encodedLength;
    }

    return total;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a specific names entry in the structure
   * @param name The name of the entry to retrieve
   */


  get(name) {
    return super.get(name);
  }
  /**
   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
   */


  getAtIndex(index) {
    return this.toArray()[index];
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */


  toArray() {
    return [...this.values()];
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const json = {};

    for (const [k, v] of this.entries()) {
      json[k] = v && v.toHuman(isExtended);
    }

    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const json = {};

    for (const [k, v] of this.entries()) {
      const jsonKey = _classPrivateFieldLooseBase(this, _jsonMap)[_jsonMap].get(k) || k;
      json[jsonKey] = v && v.toJSON();
    }

    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return stringify(typesToMap(this.registry, _classPrivateFieldLooseBase(this, _Types)[_Types]));
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return stringify(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = [];

    for (const [k, v] of this.entries()) {
      if (v && isFunction(v.toU8a)) {
        encoded.push(v.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[k]));
      }
    }

    return u8aConcat(...encoded);
  }

}